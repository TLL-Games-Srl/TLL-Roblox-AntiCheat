local GroupId = 1234567 --REPLACE 1234567 WITH YOUR GROUP ID
local MinimumRankToUseCommand = 255 --REPLACE 255 WITH THE MINIMUM RANK ID TO USE THE !WARN COMMAND

game.Players.PlayerAdded:Connect(function(Player)
	Player.CharacterAdded:Connect(function(Character)
		local WarningGUI = script.WarningGUI:Clone()
		WarningGUI.Parent = Character.Head
	end)
	
	Player.Chatted:Connect(function(Message)
		local SplitMessage = Message:split(" ")
		if SplitMessage[1] == "!warn" and Player:GetRankInGroup(GroupId) >= MinimumRankToUseCommand then
			local NameOfPlayerToWarn = SplitMessage[2]
			local PlayerToWarn = game.Players:FindFirstChild(NameOfPlayerToWarn)
			local Reason = Message:split(NameOfPlayerToWarn)[2]
			
			local WarningGUI = PlayerToWarn.Character.Head.WarningGUI
			local CurrentWarnings = WarningGUI.Warnings
			
			CurrentWarnings.Value = CurrentWarnings.Value + 1
			WarningGUI.WarningLabel.Text = "W" .. CurrentWarnings.Value .. " - " .. Reason
			
			if CurrentWarnings.Value >= 3 then
				PlayerToWarn:Kick("You've reached the maximum number of warnings and have been kicked from the server.")
			end
		end
	end)
end)

--FOR CREATE THE GROUP ID
local physicsService = game:GetService("PhysicsService")
 
-- returns a valid group id (int) or nil
function getGroupId(name)
	-- GetCollisionGroupId will throw if it does not exist
	local ok, groupId = pcall(physicsService.GetCollisionGroupId, physicsService, name)
	return ok and groupId or nil
end
 
-- returns a valid group id (int) or nil
function getOrCreateGroupId(name)
	local ok, groupId = pcall(physicsService.GetCollisionGroupId, physicsService, name)
	if not ok then
		-- Create may fail if we have hit the maximum of 32 different groups
		ok, groupId = pcall(physicsService.CreateCollisionGroup, physicsService, name)
	end
	return ok and groupId or nil
end
 
-- sets the specified part's collision group to the group with 
-- given group id
function setPartCollisionGroup(part, name)
	physicsService:SetPartCollisionGroup(part, name)
end
 
-- returns the id of part's collision
function getPartGroupId(part)
	return part.CollisionGroupId
end
 
	
print("Get 'Test' Group:", getGroupId("Test")) -- prints nil
print("Get/Create 'Test' Group:", getOrCreateGroupId("Test")) -- prints 1
print("Get Id of 'Test' Group:", getGroupId("Test")) -- prints 1
print("Setting Part1's collision group...")
setPartCollisionGroup(game.Workspace.Part1, "Test")
print("Part1's Collision Group Id:", getPartGroupId(game.Workspace.Part1)) -- prints 1
